from project import get_args, get_input_seq, get_motif, Protein_Seq_Features
import pytest


def test_get_args(mocker):
    mocker.patch(
        "sys.argv", ["project.py", "-i", "input.fasta", "-o", "output.txt", "-m"]
    )
    args = get_args()
    assert args.i == "input.fasta"
    assert args.o == "output.txt"
    assert args.m is True
    assert args.w is False


def test_get_input_seq_file():
    with pytest.raises(SystemExit):
        list(get_input_seq("input"))
    with pytest.raises(SystemExit):
        list(get_input_seq("noinput.fasta"))
    fasta_content = ">seq1\nAGKL\n>seq2\nGKFNP\n"
    fasta_file = "test.fasta"
    with open(fasta_file, "w") as f:
        f.write(fasta_content)
    sequences = list(get_input_seq(fasta_file))
    assert len(sequences) == 2
    assert sequences[0] == (">seq1", "AGKL")
    assert sequences[1] == (">seq2", "GKFNP")


def test_get_input_seq_user_input(monkeypatch):
    input_generator = (i for i in ["id", "AGKL"])
    mock_input = lambda _: next(input_generator)
    monkeypatch.setattr("builtins.input", mock_input)
    sequences = list(get_input_seq(None))
    assert len(sequences) == 1
    assert (sequences)[0] == ("id", "AGKL")


def test_get_motif(monkeypatch):
    monkeypatch.setattr("builtins.input", lambda _: " .{2}C.{2,4}C.{12}H.{3,5}H")
    assert get_motif() == ".{2}C.{2,4}C.{12}H.{3,5}H"


def test_Protein_Seq_Features():
    with pytest.raises(ValueError):
        protein = Protein_Seq_Features("")
    protein = Protein_Seq_Features(
        "MEVLQCDGCDFRAPSYEDLKAHIQDVHTAFLQPTDVAEDNVNELRCGSVNASNQTEVEFSSIKDEFAIAEDLSGQNATSLGTGGYYGHSPGYYGQHIAANPKPTNKFFQCKFCVRYFRSKNLLIEHTRKVHGAQAEGSSSGPPVPGSLNYNIMMHEGFGKVFSCQFCTYKSPRRARIIKHQKMYHKNNLKETTAPPPAPAPMPDPVVPPVSLQDPCKELPAEVVERSILESMVKPLTKSRGNFCCEWCSYQTPRRERWCDHMMKKHRSMVKILSSLRQQQEGTNLPDVPNKSAPSPTSNSTYLTMNAASREIPNTTVSNFRGSMGNSIMRPNSSASKFSPMSYPQMKPKSPHNSGLVNLTERSRYGMTDMTNSSADLETNSMLNDSSSDEELNEIDSENGLSAMDHQTSGLSAEQLMGSDGNKLLETKGIPFRRFMNRFQCPFCPFLTMHRRSISRHIENIHLSGKTAVYKCDECPFTCKSSLKLGAHKQCHTGTTSDWDAVNSQSESISSSLNEGVVSYESSSINGRKSGVMLDPLQQQQPPQPPPPPPPPPPSQPQPLQQPQPPQLQPPHQVPPQPQTQPPPTQQPQPPTQAAPLHPYKCTMCNYSTTTLKGLRVHQQHKHSFCDNLPKFEGQPSSLPLENETDSHPSSSNTVKKSQTSILGLSSKNNFVAKASRKLANDFPLDLSPVKKRTRIDEIASNLQSKINQTKQQEDAVINVEDDEEEEEDNEVEIEVELDREEEPTEPIIEVPTSFSAQQIWVRDTSEPQKEPNFRNITHDYNATNGAEIELTLSEDEEDYYGSSTNLKDHQVSNTALLNTQTPIYGTEHNSENTDFGDSGRLYYCKHCDFNNKSARSVSTHYQRMHPYIKFSFRYILDPNDHSAVYRCLECYIDYTNFEDLQQHYGEHHPEAMNVLNFDHSDLIYRCRFCSYTSPNVRSLMPHYQRMHPTVKINNAMIFSSYVVEQQEGLNTESQTLREILNSAPKNMATSTPVARGGGLPATFNKNTPKTFTPECENQKDPLVNTVVVYDCDVCSFASPNMHSVLVHYQKKHPEEKASYFRIQKTMRMVSVDRGSALSQLSFEVGAPMSPKMSNMGSPPPPQPPPPDLSTELYYCKHCSYSNRSVVGVLVHYQKRHPEIKVTAKYIRQAPPTAAMMRGVEGPQGSPRPPAPIQQLNRSSSERDGPPVENEMFFCQHCDYGNRTVKGVLIHYQKKHRDFKANADVIRQHTATIRSLCDRNQKKPASCVLVSPSNLERDKTKLRALKCRQCSYTSPYFYALRKHIKKDHPALKATVTSIMRWAFLDGLIEAGYHCEWCIYSHTEPNGLLLHYQRRHPEHYVDYTYMATKLWAGPDPSPPSLTMPAEAKTYRCRDCVFEAVSIWDITNHYQAFHPWAMNGDESVLLDIIKEKDAVEKPILSSEELAGPVNCENSIPTPFPEQEAECPEDARLSPEKSLQLASANPAISSTPYQCTVCQSEYNNLHGLLTHYGKKHPGMKVKAADFAQDIDINPGAVYKCRHCPYINTRIHGVLTHYQKRHPSIKVTAEDFVHDVEQSADISQNDVEETSRIFKQGYGAYRCKLCPYTHGTLEKLKIHYEKYHNQPEFDVFSQSPPKLPVPLEPEMTTEVSPSQVSITEEEVGEEPVSTSHFSTSHLVSHTVFRCQLCKYFCSTRKGIARHYRIKHNNVRAQPEGKNNLFKCALCAYTNPIRKGLAAHYQKRHDIDAYYTHCLAASRTISDKPNKVIIPSPPKDDSPQLSEELRRAVEKKKCSLCSFQSFSKKGIVSHYMKRHPGVFPKKQHASKLGGYFTAVYADEHEKPTLMEEEERGNFEKAEVEGEAQEIEWLPFRCIKCFKLSFSTAELLCMHYTDHHSRDLKRDFIILGNGPRLQNSTYQCKHCDSKLQSTAELTSHLNIHNEEFQKRAKRQERRKQLLSKQKYADGAFADFKQERPFGHLEEVPKIKERKVVGYKCKFCVEVHPTLRAICNHLRKHVQYGNVPAVSAAVKGLRSHERSHLALAMFTREDKYSCQYCSFVSAFRHNLDRHMQTHHGHHKPFRCKLCSFKSSYNSRLKTHILKAHAGEHAYKCSWCSFSTMTISQLKEHSLKVHGKALTLPRPRIVSLLSSHSHHSSQKATPAEEVEDSNDSSYSEPPDVQQQLNHYQSAALARNNSRVSPVPLSGAAAGTEQKTEAVLHCEFCEFSSGYIQSIRRHYRDKHGGKKLFKCKDCSFYTGFKSAFTMHVEAGHSAVPEEGPKDLRCPLCLYHTKYKRNMIDHIVLHREERVVPIEVCRSKLSKYLQGVVFRCDKCTFTCSSDESLQQHIEKHNELKPYKCQLCYYETKHTEELDSHLRDEHKVSRNFELVGRVNLDQLEQMKEKMESSSSDDEDKEEEMNSKAEDRELMRFSDHGAALNTEKRFPCEFCGRAFSQGSEWERHVLRHGMALNDTKQVSREEIHPKEIMENSVKMPSIEEKEDDEAIGIDFSLKNETVAICVVTADKSLLENAEAKKE"
    )
    assert protein.seq_length() == 2506
    assert round(protein.Mw(), 2) == 284687.83
    assert protein.gravy_score() == -0.744
    assert protein.aa_composition_num() == {
        "A": 140,
        "V": 131,
        "I": 95,
        "L": 170,
        "M": 59,
        "P": 179,
        "G": 104,
        "C": 87,
        "F": 90,
        "Y": 95,
        "W": 12,
        "S": 236,
        "T": 132,
        "N": 120,
        "Q": 124,
        "H": 123,
        "K": 176,
        "R": 129,
        "D": 112,
        "E": 192,
    }
    assert protein.aa_composition_percentage() == {
        "A": 5.59,
        "V": 5.23,
        "I": 3.79,
        "L": 6.78,
        "M": 2.35,
        "P": 7.14,
        "G": 4.15,
        "C": 3.47,
        "F": 3.59,
        "Y": 3.79,
        "W": 0.48,
        "S": 9.42,
        "T": 5.27,
        "N": 4.79,
        "Q": 4.95,
        "H": 4.91,
        "K": 7.02,
        "R": 5.15,
        "D": 4.47,
        "E": 7.66,
    }
    assert protein.aa_group_percentage() == {
        "nonpolar": 38.51,
        "aromatic": 7.86,
        "polar": 24.42,
        "all_charged": 29.21,
        "positive_charged": 11.93,
        "negative_charged": 17.28,
    }
    assert protein.motif_finder("C.{2,4}C.{3}[LIVMFYWC].{8}H.{3,5}H") == [
        {"motif_match": "CKFCVRYFRSKNLLIEHTRKVH", "position": (110, 131)},
        {"motif_match": "CDECPFTCKSSLKLGAHKQCH", "position": (472, 492)},
        {"motif_match": "CLECYIDYTNFEDLQQHYGEHH", "position": (888, 909)},
        {"motif_match": "CTVCQSEYNNLHGLLTHYGKKH", "position": (1472, 1493)},
        {"motif_match": "CQLCKYFCSTRKGIARHYRIKH", "position": (1662, 1683)},
        {"motif_match": "CKHCDSKLQSTAELTSHLNIH", "position": (1894, 1914)},
        {"motif_match": "CDKCTFTCSSDESLQQHIEKH", "position": (2302, 2322)},
        {"motif_match": "CEFCGRAFSQGSEWERHVLRH", "position": (2416, 2436)},
    ]

